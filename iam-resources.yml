AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to create IAM resources for the lab:
  - One-time password stored in Secrets Manager.
  - Two IAM groups (S3 and EC2) with read-only access.
  - Two IAM users (s3-user, ec2-user) with console access.
  - SSM Parameters to store each user’s email.
  - An EventBridge rule to trigger a Lambda function on user creation.

Parameters:
  LambdaS3Bucket:
    Type: String
    Description: S3 bucket where the Lambda code package is stored.
  LambdaS3Key:
    Type: String
    Description: S3 key (zip file) for the Lambda function.
  EC2UserEmail:
    Type: String
    Description: Email address for ec2-user.
  S3UserEmail:
    Type: String
    Description: Email address for s3-user.
  TemporaryPassword:
    Type: String
    NoEcho: true
    Description: Temporary password to assign to the IAM users.

Resources:
  # 1. One-time password secret
  OneTimePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OneTimePasswordSecret
      Description: One-time password for IAM users.
      GenerateSecretString:
        SecretStringTemplate: '{"password":""}'
        GenerateStringKey: password
        PasswordLength: 12
        ExcludeCharacters: '"@/\\'

  # 2. IAM Groups and Policies
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3UserGroup

  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2UserGroup

  S3GroupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ReadAccessPolicy
      Groups:
        - Ref: S3UserGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource: "*"

  EC2GroupPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2ReadAccessPolicy
      Groups:
        - Ref: EC2UserGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:Describe*
            Resource: "*"

  # 3. IAM Users with Console Access and Login Profiles using the one-time password
  EC2User:
    Type: AWS::IAM::User
    DependsOn:
      - IAMUserEventLambda
      - IAMUserEventRule
    Properties:
      UserName: "ec2-user"
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Ref TemporaryPassword
        PasswordResetRequired: true

  S3User:
    Type: AWS::IAM::User
    DependsOn:
      - IAMUserEventLambda
      - IAMUserEventRule
    Properties:
      UserName: "s3-user"
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Ref TemporaryPassword
        PasswordResetRequired: true


  # 4. Add users to their respective groups
  AddEC2UserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref EC2UserGroup
      Users:
        - !Ref EC2User

  AddS3UserToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref S3UserGroup
      Users:
        - !Ref S3User

  # 5. SSM Parameters to store each user’s email address
  EC2UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /users/ec2-user/email
      Type: String
      Value: !Ref EC2UserEmail

  S3UserEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /users/s3-user/email
      Type: String
      Value: !Ref S3UserEmail

  # 6. Lambda function role for executing and logging
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRoleForIAMUserEvents
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLoggingAndAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/users/*/email
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                  - cloudformation:ListStacks
                Resource: !Ref OneTimePasswordSecret

  # 7. Lambda Function (Java) triggered by EventBridge
  IAMUserEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IAMUserEventLambda
      Handler: com.giftedlabs.UserCreationHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      # AWS Lambda does not yet support Java 21 – use java17 (or java11) as runtime.
      Runtime: java21
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      MemorySize: 512
      Timeout: 30

  # 8. EventBridge Rule to detect IAM CreateUser events
  IAMUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMUserCreationRule
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - CreateUser
      Targets:
        - Arn: !GetAtt IAMUserEventLambda.Arn
          Id: TargetLambda

  # 9. Grant EventBridge permission to invoke the Lambda
  LambdaPermissionForEventBridge:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IAMUserEventLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt IAMUserEventRule.Arn

Outputs:
  OneTimePasswordSecretArn:
    Description: ARN of the one-time password secret.
    Value: !Ref OneTimePasswordSecret
